---

- name: Verify
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    custom_resource_def: "{{ lookup('file', '/'.join([deploy_dir, 'crds/apps_v1alpha1_jellyfin_cr.yaml'])) | from_yaml }}"
  tasks:
  - block:
    - name: Create the apps.fabianism.us/v1alpha1.Jellyfin
      k8s:
        state: present
        namespace: '{{ namespace }}'
        definition: "{{ custom_resource_def }}"

    - name: Wait 30s for reconcilation to run
      k8s_facts:
        api_version: '{{ custom_resource_def.apiVersion }}'
        kind: '{{ custom_resource_def.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ custom_resource_def.metadata.name }}'
      register: cr
      until:
      - "'Successful' in (cr | json_query('resources[].status.conditions[].reason'))"
      delay: 3
      retries: 10

    - name: Assert that a URL has been set on the custom resource
      assert:
        that: custom_resource.0.status.url is defined
      vars:
        custom_resource: "{{ q('k8s',
          api_version='apps.fabianism.us/v1alpha1',
          kind='Jellyfin',
          resource_name='example-jellyfin',
          namespace=namespace
        )}}"

    - name: Store URL
      set_fact:
        url: "{{ q('k8s',
          api_version='apps.fabianism.us/v1alpha1',
          kind='Jellyfin',
          resource_name='example-jellyfin',
          namespace=namespace
        ).0.status.url}}"

    - name: Assert that the URL is valid
      assert:
        that:
        - (url | urlsplit(item) | default(False, boolean=True)) != False
      with_items:
      - hostname
      - scheme

    rescue:
    - name: Output CR
      debug: var=custom_resource
      vars:
        custom_resource: "{{ q('k8s',
          api_version='apps.fabianism.us/v1alpha1',
          kind='Jellyfin',
          resource_name='example-jellyfin',
          namespace=namespace
        )}}"

    - fail:
        msg: "Failed in asserts.yml"

- import_playbook: '{{ playbook_dir }}/../default/asserts.yml'
